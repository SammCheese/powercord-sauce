import { Doujin } from './doujin';
import { SearchResult } from './search';
export interface APIDoujin {
    id: number;
    media_id: string;
    title: {
        english: string;
        japanese: string;
        pretty: string;
    };
    images: {
        pages: APIImage[];
        cover: APIImage;
        thumbnail: APIImage;
    };
    scanlator: string;
    upload_date: number;
    tags: APITag[];
    num_pages: number;
    num_favorites: number;
}
export interface APITag {
    id: number;
    type: 'tag' | 'category' | 'artist' | 'parody' | 'character' | 'group' | 'language';
    name: string;
    url: string;
    count: number;
}
export interface APIImage {
    t: 'g' | 'j' | 'p';
    w: number;
    h: number;
}
export interface APISearchResult {
    result: APIDoujin[];
    num_pages: number;
    per_page: number;
}
export declare enum SortMethods {
    /**
     * Sort by most recently published
     */
    RECENT = "",
    /**
     * Sort by amount of favorites
     */
    POPULAR_ALL_TIME = "popular",
    /**
     * Sort by amount of favorites gained in the last 7 days
     */
    POPULAR_THIS_WEEK = "popular-week",
    /**
     * Sort by amount of favorites gained in the last 24 hours
     */
    POPULAR_TODAY = "popular-today"
}
export declare const HOST_URL = "https://nhentai.net";
export declare const IMAGE_URL = "https://i.nhentai.net";
export declare const THUMBS_URL = "https://t.nhentai.net";
export declare const API_URL: string;
export declare class API {
    options: {
        preserveRaw: boolean;
    };
    /**
     * Constuct a new API wrapper
     * @param options.preserveRaw Save the raw doujin to `Doujin#raw`
     */
    constructor(options?: {
        preserveRaw: boolean;
    });
    /**
     * Check if a doujin exists
     * @param doujinID ID of the doujin
     */
    doujinExists(doujinID: number | string): Promise<boolean>;
    /**
     * Fetch a doujin
     * @param doujinID ID of the doujin.
     */
    fetchDoujin(doujinID: number | string): Promise<Doujin | undefined>;
    /**
     * Get doujins shown on the homepage. Alias for `search('*', [...])`
     */
    fetchHomepage(page?: string | number, sort?: string): Promise<SearchResult>;
    /**
     * Search nhentai for any doujin that matches the query in any titles
     */
    search(query: string, page?: string | number, sort?: string): Promise<SearchResult>;
    /**
     * Searches nhentai for doujins that have this tag
     * @param tagID ID of the tag
     */
    searchByTagID(tagID: number | string, page?: string | number, sort?: string): Promise<SearchResult>;
    /**
     * Find similar doujins
     * @param doujinID ID of the doujin
     */
    searchRelated(doujinID: number | string, page?: string | number): Promise<SearchResult>;
    /**
     * Get a random doujin by using nhentai's `/random` endpoint which redirects to a doujin and the url is captured.
     */
    randomDoujinID(): Promise<number>;
    /**
     * Gets a random doujin using `randomDoujinID()` and `fetchDoujin()`
     */
    randomDoujin(): Promise<Doujin>;
}
export declare class nhentaiAPIError extends Error {
    response: Record<string, unknown>;
    url: string;
    constructor(response: Record<string, unknown>, url: string);
}
